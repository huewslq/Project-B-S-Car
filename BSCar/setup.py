
import os
import sys
from app import create_app, db
from app.models import User, Category, Listing, ListingImage

def setup_database():
    app = create_app()
    
    with app.app_context():
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        db.create_all()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        categories_count = Category.query.count()
        if categories_count == 0:
            print("üìÇ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
            categories = [
                '–ù–æ–≤—ã–µ',
                '–ë/–£'
            ]
            
            for cat_name in categories:
                category = Category(name=cat_name)
                db.session.add(category)
            
            db.session.commit()
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        else:
            print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({categories_count} —à—Ç.)")
        test_user = User.query.filter_by(email='test@example.com').first()
        if not test_user:
            print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            test_user = User(
                email='test@example.com',
                password_hash='test123',
                name='–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                role='user'
            )
            db.session.add(test_user)
            db.session.commit()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
        else:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        listings_count = Listing.query.count()
        if listings_count == 0:
            print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
            new_category = Category.query.filter_by(name='–ù–æ–≤—ã–µ').first()
            used_category = Category.query.filter_by(name='–ë/–£').first()
            
            test_listings = [
                {
                    'title': 'BMW X5 2020 –≥–æ–¥–∞',
                    'description': '–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü, –ø–æ–ª–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è. –ü—Ä–æ–±–µ–≥ 45000 –∫–º.',
                    'price': 3500000,
                    'category_id': used_category.id if used_category else None,
                    'owner_id': test_user.id,
                    'status': 'active'
                },
                {
                    'title': 'Toyota Camry 2024',
                    'description': '–ù–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –ø–æ–ª–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è, –≤—Å–µ –æ–ø—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã.',
                    'price': 2800000,
                    'category_id': new_category.id if new_category else None,
                    'owner_id': test_user.id,
                    'status': 'active'
                },
                {
                    'title': 'Honda Civic 2024',
                    'description': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω, —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å, –ø–æ–ª–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è.',
                    'price': 2200000,
                    'category_id': new_category.id if new_category else None,
                    'owner_id': test_user.id,
                    'status': 'active'
                },
                {
                    'title': 'Audi A4 2019',
                    'description': '–ü—Ä–µ–º–∏—É–º —Å–µ–¥–∞–Ω, –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü.',
                    'price': 2400000,
                    'category_id': used_category.id if used_category else None,
                    'owner_id': test_user.id,
                    'status': 'active'
                }
            ]
            
            for listing_data in test_listings:
                listing = Listing(**listing_data)
                db.session.add(listing)
            
            db.session.commit()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_listings)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        else:
            print(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({listings_count} —à—Ç.)")

def main():
    print("üöó BSCar - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 40)
    
    try:
        setup_database()
        print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞:")
        print("   Email: test@example.com")
        print("   –ü–∞—Ä–æ–ª—å: test123")
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
        print("   python run.py")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ: {e}")
        print("\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   1. –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö MySQL")
        print("   2. –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ")
        print("   3. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö 'bscar' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        sys.exit(1)

if __name__ == '__main__':
    main()
